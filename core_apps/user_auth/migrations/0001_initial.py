# Generated by Django 5.1.4 on 2025-01-20 09:40

import core_apps.user_auth.managers
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the user",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Required. 12 characters or fewer for school ID",
                        max_length=12,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="Primary contact email, used for login and communications",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "id_no",
                    models.PositiveIntegerField(
                        help_text="Official school identification number",
                        unique=True,
                        verbose_name="ID number",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="User's first name",
                        max_length=30,
                        verbose_name="first name",
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        help_text="User's middle name (optional)",
                        max_length=30,
                        null=True,
                        verbose_name="middle name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="User's last name",
                        max_length=30,
                        verbose_name="last name",
                    ),
                ),
                (
                    "security_question",
                    models.CharField(
                        choices=[
                            ("MAIDEN_NAME", "What is your mother's maiden name?"),
                            ("FAVOURITE_COLOR", "What is your favourite color?"),
                            ("BIRTH_CITY", "What is the city where you were born?"),
                            ("FAVOURITE_BOOK", "What is your favourite book?"),
                        ],
                        help_text="Question used for account recovery",
                        max_length=50,
                        verbose_name="security question",
                    ),
                ),
                (
                    "security_answer",
                    models.CharField(
                        help_text="Answer to the security question",
                        max_length=50,
                        verbose_name="security answer",
                    ),
                ),
                (
                    "account_status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("LOCKED", "Locked")],
                        default="ACTIVE",
                        help_text="Current status of the user account",
                        max_length=10,
                        verbose_name="account status",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMINISTRATOR", "Administrator"),
                            ("TEACHER", "Teacher"),
                            ("PARENT", "Parent"),
                            ("STUDENT", "Student"),
                        ],
                        default="STUDENT",
                        help_text="User's role in the school system",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts",
                        verbose_name="failed login attempts",
                    ),
                ),
                (
                    "last_failed_login",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of the last failed login attempt",
                        null=True,
                    ),
                ),
                (
                    "otp",
                    models.CharField(
                        blank=True,
                        help_text="Temporary code for two-factor authentication",
                        max_length=6,
                        null=True,
                        verbose_name="one-time password",
                    ),
                ),
                (
                    "otp_expiry_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the current OTP expires",
                        null=True,
                        verbose_name="OTP expiry time",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["-date_joined"],
            },
            managers=[
                ("objects", core_apps.user_auth.managers.UserManager()),
            ],
        ),
    ]
